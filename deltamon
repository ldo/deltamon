#!/usr/bin/python3
#+
# This script periodically executes a given command and monitors the
# output from it, looking for one or more given numbers and reporting
# changes, and rates of changes, of those numbers. Invoke this script
# as follows:
#
#     deltamon [<options>] <cmd> <monitor-spec> [<monitor-spec> ...]
#
# where <cmd> is the command to execute to examine the output from.
# Each <monitor-spec> describes a number to monitor in the command output, and
# looks like this:
#
#     <prefix>:<linenr>:<fieldnr>[:<units>]
#
# where <prefix> is an arbitrary string to display in front of the quantity,
# <linenr> is the line number in the output in which to find the number,
# <fieldnr> indicates which numeric-looking substring on that line (counting from 1)
# is that number, and <units> is an arbitrary string (defaults to empty) to display
# as the units of the quantity.
#
# Valid options are as follows:
#
#     --autoscale=decimal|binary
#         automatically scale very large or very small delta values and prepend
#         appropriate SI prefixes to units
#     --interval=<nrseconds>
#         how long to wait between executions of the command (decimals allowed).
#         Defaults to 2.0 seconds.
#     --show-output
#         if present, then the full output of <cmd> is displayed each time
#         prior to displaying the extracted numbers.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import math
import time
import subprocess
import re
import getopt

#+
# Useful stuff
#-

# long prefixes not actually used currently
decimal_prefixes = \
    { # source : <http://en.wikipedia.org/wiki/Decimal_prefix>
        3 : {"short" : "k", "long" : "kilo"},
        -3 : {"short" : "m", "long" : "milli"},
        6 : {"short" : "M", "long" : "mega"},
        -6 : {"short" : "µ", "long" : "micro"},
        9 : {"short" : "G", "long" : "giga"},
        -9 : {"short" : "n", "long" : "nano"},
        12 : {"short" : "T", "long" : "tera"},
        -12 : {"short" : "p", "long" : "pico"},
        15 : {"short" : "P", "long" : "peta"},
        -15 : {"short" : "f", "long" : "femto"},
        18 : {"short" : "E", "long" : "exa"},
        -18 : {"short" : "a", "long" : "atto"},
        # can't be bothered including any more for now
    }
binary_prefixes = \
    { # source : <http://en.wikipedia.org/wiki/Binary_prefix>
      # note no negative exponents have been defined here
        1 : {"short" : "ki", "long" : "kibi"},
        2 : {"short" : "Mi", "long" : "mebi"},
        3 : {"short" : "Gi", "long" : "gibi"},
        4 : {"short" : "Ti", "long" : "tebi"},
        5 : {"short" : "Pi", "long" : "pebi"},
        6 : {"short" : "Ei", "long" : "exbi"},
        7 : {"short" : "Zi", "long" : "zebi"},
        8 : {"short" : "Yi", "long" : "yobi"},
    }

thousands_sep = "_"
group_thousands = True

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    [
        "autoscale=",
        "interval=",
        "show-output",
    ]
  )
if len(args) < 2 :
    raise getopt.GetoptError \
      (
        "need <cmd> arg followed by at least one <monitor-spec> arg"
      )
#end if
autoscale = None
interval = 2.0
show_output = False
for keyword, value in opts :
    if keyword == "--autoscale" :
        if "decimal".startswith(value.lower()) :
            autoscale = decimal_prefixes
            scale_multiplier = 10
            scale_group = 3
        elif "binary".startswith(value.lower()) :
            autoscale = binary_prefixes
            scale_multiplier = 1024
            scale_group = 1
        else :
            raise getopt.GetoptError("unrecognized --autoscale value: “%s”" % value)
        #end if
    elif keyword == "--interval" :
        interval = float(value)
    elif keyword == "--show-output" :
        show_output = True
    #end if
#end for
cmd = args[0]
monspecs = []
for monspec in args[1:] :
    parts = monspec.split(":", 3)
    if len(parts) < 3 :
        raise getopt.GetoptError \
          (
            "<monitor-spec> \"%s\" must be of form <prefix>:<linenr>:<fieldnr>[:<units>]" % monspec
         )
    #end if
    if len(parts) > 3 :
        units = parts[3]
    else :
        units = ""
    #end if
    monspecs.append((int(parts[1]), int(parts[2]), parts[0], units))
#end for

numpat = re.compile(r"(?:^|\W)([\+\-]?[0-9]+(?:\.?[0-9]*))")
previous = {}
  # previous values for computing deltas, key is first two components of monspec
  # (line nr and component nr within line)
while True :
    child = subprocess.Popen \
      (
        args = cmd,
        stdout = subprocess.PIPE,
        close_fds = False,
        shell = True,
      )
    (data, _) = child.communicate()
    if child.returncode != 0 :
        if child.returncode < 0 :
            sys.stderr.write("child terminated with signal %d\n" % - child.returncode)
        else :
            sys.stderr.write("child terminated with status %d\n" % child.returncode)
        #end if
        break
    #end if
    data = data.decode("utf-8")
    if show_output :
        sys.stdout.write(data)
    #end if
    data = data.split("\n")
    parsed = [None] * len(data)
    for monspec in monspecs :
        if monspec[0] <= len(data) :
            if parsed[monspec[0] - 1] == None :
                parsed[monspec[0] - 1] = tuple(m.group(1) for m in numpat.finditer(data[monspec[0] - 1]))
            #end if
            line = parsed[monspec[0] - 1]
            if monspec[1] <= len(line) :
                value = line[monspec[1] - 1]
                dotpos = value.find(".")
                if dotpos >= 0 :
                    value_precision = len(value) - dotpos - 1
                    value = float(value)
                else :
                    value_precision = 0
                    value = int(value)
                #end if
                valuestr = "%%.%df" % value_precision % value
                if group_thousands :
                    fractstart = valuestr.find(".")
                    if fractstart >= 0 :
                        inintpart = valuestr[0:fractstart]
                        infractpart = valuestr[fractstart + 1:]
                    else :
                        inintpart = valuestr
                        infractpart = None
                    #end if
                    outintpart = ""
                    outfractpart = ""
                    while True :
                        if len(outintpart) != 0 and len(inintpart) != 0 :
                            outintpart = thousands_sep + outintpart
                        #end if
                        outintpart = inintpart[-3:] + outintpart
                        inintpart = inintpart[:-3]
                        if len(inintpart) == 0 :
                            break
                    #end while
                    if infractpart != None :
                        while True :
                            if len(outfractpart) != 0 and len(infractpart) != 0 :
                                outfractpart += thousands_sep
                            #end if
                            outfractpart += infractpart[:3]
                            infractpart = infractpart[3:]
                            if len(infractpart) == 0 :
                                break
                        #end while
                    #end if
                    valuestr = outintpart + ("", "." + outfractpart)[infractpart != None]
                #end if
                format = "%%(prefix)s: %%(value)s%%(units)s"
                format_fields = {}
                data_fields = \
                    {
                        "value" : valuestr,
                        "prefix" : monspec[2],
                        "units" : monspec[3],
                    }
                if monspec[0:2] in previous :
                    delta = (value - previous[monspec[0:2]]) / interval
                    delta_precision = 0
                    scale_prefix = ""
                    if autoscale != None and delta != 0 :
                        scale_exp = \
                            (
                                math.floor
                                  (
                                    math.log(delta) / (math.log(scale_multiplier) * scale_group)
                                  )
                            *
                                scale_group
                            )
                        if scale_exp != 0 :
                            if scale_exp in autoscale :
                                scale_entry = autoscale[scale_exp]
                            else :
                                best_exp = (min, max)[scale_exp > 0](autoscale.keys())
                                if scale_exp > 0 and best_exp > 0 :
                                    scale_entry = autoscale[best_exp]
                                else :
                                    scale_entry = None
                                #end if
                            #end if
                            if scale_entry != None :
                                delta /= scale_multiplier ** scale_exp
                                scale_prefix = scale_entry["short"]
                                delta_precision = 3
                            #end if
                        #end if
                    #end if
                    format += " (%%(delta).%(delta_precision)df%%(scale_prefix)s%%(units)s/s)"
                    format_fields["delta_precision"] = delta_precision
                    data_fields["delta"] = delta
                    data_fields["scale_prefix"] = scale_prefix
                #end if
                sys.stdout.write \
                  (
                        (format + "\n") % format_fields
                    %
                        data_fields
                  )
                previous[monspec[0:2]] = value
            #end if
        #end if
    #end for
    try :
        time.sleep(interval)
    except KeyboardInterrupt :
        sys.stdout.write("\n") # avoid peculiarities with readline and shell prompt
        break
    #end try
#end while
