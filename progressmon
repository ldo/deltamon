#!/usr/bin/python3
#+
# This script periodically executes a given command, and uses the
# output to update a KDE progress dialog, stopping when it gets to 100%.
# Invoke it as follows:
#
#     progressmon [<options>] <cmd> <value-monitor-spec> <limit-monitor-spec> <msg>
#
# where <cmd> is the command to execute to examine the output from, and
# the <value-monitor-spec> and <limit-monitor-spec> indicate where to
# obtain the current value and limit value from the output. Each monitor-spec
# takes the form <linenr>:<fieldnr>, where <linenr> is the line number
# in the output (counting from 1), and <fieldnr> counts which number-resembling
# field on that line (counting from 1) to extract. <msg> is the message to
# display in the progress dialog.
#
# Valid options are as follows:
#
#     --backwards
#         if specified, then the current value is assumed to start from the
#         limit value and decrease to 0 when complete.
#     --check-process=<pid>
#         check that the process with the given pid still exists at each
#         update.
#     --interval=<nrseconds>
#         how long to wait between executions of the command (decimals allowed).
#         Defaults to 2.0 seconds.
#     --show-output
#         if present, then the full output of <cmd> is displayed each time
#         prior to displaying the extracted numbers.
#
# Example: monitoring the copying of a directory tree: suppose you have
# issued a command like
#
#      cp -a «src-dir» «dst-dir»
#
# then you can monitor its progress with a command like
#
#      progressmon 'du -ks «src-dir»; du -ks «dst-dir»' 2:1 1:1 "Copying..."
#
# Example of using the --backwards option: deleting a large directory tree.
# First, save its initial size:
#
#     initial_size=$(du -ks «dir» | cut -f1)
#
# Start the deletion going as as background task:
#
#     rm -rf «dir» &
#
# and monitor the progress:
#
#     progressmon --backwards "echo $initial_size; du -ks «dir»" 1:1 2:1 "Deleting..."
#
# Copyright 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import subprocess
import errno
import re
import time
import dbus
import getopt

#+
# Useful D-Bus stuff
#-

prop_conv = \
    {
        bool : lambda x : str(int(x)),
    }

def set_prop(obj, interface, propname, val) :
    "sets a new value for a specified property via a specified interface for the object."
    conv = prop_conv.get(type(val), str)
    dbus.Interface \
      (
        obj,
        dbus_interface = "org.freedesktop.DBus.Properties"
      ).Set(interface, propname, conv(val))
#end set_prop

def call(obj, interface, methname, args) :
    "calls the specified method with the given tuple of args via a specified" \
    " interface for the object."
    return \
        dbus.Interface(obj, interface).get_dbus_method(methname)(*tuple(str(arg) for arg in args))
#end call

kde_progress_interface = "org.kde.kdialog.ProgressDialog"

#+
# Mainline
#-

interval = 2.0
show_output = False
nr_steps = 100
backwards = False
check_process = None
(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ("backwards", "check-process=", "interval=", "show-output", "steps=")
  )
for keyword, value in opts :
    if keyword == "--backwards" :
        backwards = True
    elif keyword == "--check-process" :
        check_process = int(value)
    elif keyword == "--interval" :
        interval = float(value)
    elif keyword == "--show-output" :
        show_output = True
    elif keyword == "--steps" :
        nr_steps = int(value)
    #end if
#end for
if len(args) != 4 :
    raise getopt.GetoptError("need exactly 4 args, the command, value_spec, limit_spec and message")
#end if
cmd = args[0]
msg = args[3]
numpat = re.compile(r"(?:^|\W)([\+\-]?[0-9]+(?:\.?[0-9]*))")

monspecs = []
for monspec in args[1:3] :
    parts = monspec.split(":", 1)
    if len(parts) != 2 :
        raise getopt.GetoptError \
          (
            "<monitor-spec> \"%s\" must be of form <linenr>:<fieldnr>" % monspec
         )
    #end if
    monspecs.append((int(parts[0]), int(parts[1])))
#end for

bus_name, obj_path = subprocess.check_output \
  (
    args = ("kdialog", "--progressbar", msg, str(nr_steps)),
    stdin = subprocess.DEVNULL
  ).rstrip().decode().split(" ", 1)

progress_dialog = dbus.SessionBus().get_object(bus_name, obj_path)
  # read/write properties: “maximum : int”, “value : int” and “autoClose : bool”
  # methods: “setLabelText(label : str)”, “showCancelButton(value : bool)”, “close()”
set_prop \
  (
    obj = progress_dialog,
    interface = kde_progress_interface,
    propname = "value",
    val = 0
  )
set_prop \
  (
    obj = progress_dialog,
    interface = kde_progress_interface,
    propname = "autoClose",
    val = True
  )

while True :
    if check_process != None :
        try :
            os.kill(check_process, 0)
        except OSError as Err :
            if Err.errno == errno.ESRCH :
                sys.stderr.write("process %d has terminated.\n" % check_process)
                break
            elif Err.errno != errno.EPERM : # proves process exists
                raise
            #end if
        #end try
    #end if
    try :
        data = subprocess.check_output \
          (
            args = cmd,
            close_fds = False,
            shell = True,
          ).decode()
    except subprocess.CalledProcessError as fail :
        sys.stderr.write("Error invoking command: %s\n" % str(fail))
        data = None
    #end try
    if data != None :
        if show_output :
            sys.stdout.write(data)
        #end if
        data = data.split("\n")[:max(m[0] for m in monspecs)]
        parsed = []
        for line in data :
            parsed.append(list(m.group(1) for m in numpat.finditer(line)))
        #end for
        value = float(parsed[monspecs[0][0] - 1][monspecs[0][1] - 1])
        limit = float(parsed[monspecs[1][0] - 1][monspecs[1][1] - 1])
        try :
            if backwards :
                value = limit - value
            #end if
            set_prop \
              (
                obj = progress_dialog,
                interface = kde_progress_interface,
                propname = "value",
                val = round(value * nr_steps / limit)
              )
        except dbus.exceptions.DBusException as fail :
            if fail.get_dbus_name() == "org.freedesktop.DBus.Error.ServiceUnknown" :
                break # progress dialog has gone away
            #end if
            raise
        #end try
    #end if
    try :
        time.sleep(interval)
    except KeyboardInterrupt :
        sys.stdout.write("\n") # avoid peculiarities with readline and shell prompt
        break
    #end try
#end while
